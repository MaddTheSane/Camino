<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE html [
  <!ENTITY % htmlDTD PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "DTD/xhtml1-strict.dtd">
  %htmlDTD;
]>

<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<html xmlns="http://www.w3.org/1999/xhtml" class="blacklist">
  <head>
    <link rel="stylesheet" href="chrome://global/skin/netError.css" type="text/css" media="all" />

    <script type="application/javascript" src="chrome://global/content/strres.js"/>
    <script type="application/javascript"><![CDATA[
      // Error url MUST be formatted like this:
      //   about:blocked?e=error_code&u=url
      
      // Note that this file uses document.documentURI to get
      // the URL (with the format from above). This is because
      // document.location.href gets the current URI off the docshell,
      // which is the URL displayed in the location bar, i.e.
      // the URI that the user attempted to load.

      function getErrorCode()
      {
        var url = document.documentURI;
        var error = url.search(/e\=/);
        var duffUrl = url.search(/\&u\=/);
        return decodeURIComponent(url.slice(error + 2, duffUrl));
      }

      function getURL()
      {
        var url = document.documentURI;
        var index = url.search(/u\=/);

        // index == -1 if not found; if so, return an empty string
        // instead of what would turn out to be portions of the URI
        if (index == -1)
          return "";

        return decodeURIComponent(url.slice(index + 2));
      }
      
      /**
       * Attempt to parse the result of getURL and extract a hostname.  Fail back
       * to getURL so that we always return something meaningful.
       */
      function getHostString()
      {
        return document.location.hostname;
      }
      
      function initPage()
      {
        // Handoff to the appropriate initializer, based on error code
        switch(getErrorCode()) {
          case "malwareBlocked" :
            initPage_malware();
            break;
          case "phishingBlocked" :
            initPage_phishing();
            break;
        }
        // Give the overlay a sane initial focus, the default button
        document.getElementById("getMeOutButton").focus();
      }        
      
      /**
       * Initialize custom strings and functionality for blocked malware case
       */
      function initPage_malware()
      {
        // Remove phishing strings
        var el = document.getElementById("errorTitleText_phishing");
        el.parentNode.removeChild(el);

        el = document.getElementById("errorShortDescText_phishing");
        el.parentNode.removeChild(el);

        el = document.getElementById("errorLongDescText_phishing");
        el.parentNode.removeChild(el);

        // Set sitename
        document.getElementById("malware_sitename").textContent = getHostString();
        document.title = document.getElementById("errorTitleText_malware")
                                 .innerHTML;
      }
      
      /**
       * Initialize custom strings and functionality for blocked phishing case
       */
      function initPage_phishing()
      {
        // Remove malware strings
        var el = document.getElementById("errorTitleText_malware");
        el.parentNode.removeChild(el);

        el = document.getElementById("errorShortDescText_malware");
        el.parentNode.removeChild(el);

        el = document.getElementById("errorLongDescText_malware");
        el.parentNode.removeChild(el);

        // Set sitename
        document.getElementById("phishing_sitename").textContent = getHostString();
        document.title = document.getElementById("errorTitleText_phishing")
                                 .innerHTML;
      }

      /**
       * Handle keypress events in the overlay. Click the default button
       * if the enter/return key was pressed.
       */
      function handleKeypress(anEvent)
      {
        var outButton = document.getElementById("getMeOutButton");
        if (anEvent.which == 13) {
          outButton.click();
          return true;
        }
        return false;
      }
    ]]></script>
  </head>

  <body onkeypress="handleKeypress(event)">
    <div id="errorPageContainer">
    
      <!-- Error Title -->
      <div id="errorTitle">
        <h1 id="errorTitleText_phishing">PhishingTitleText</h1>
        <h1 id="errorTitleText_malware">MalwareTitleText</h1>
      </div>
      
      <div id="errorLongContent">
      
        <!-- Short Description -->
        <div id="errorShortDesc">
          <p id="errorShortDescText_phishing">PhishingShortDescText</p>
          <p id="errorShortDescText_malware">MalwareShortDescText</p>
        </div>

        <!-- Long Description -->
        <div id="errorLongDesc">
          <p id="errorLongDescText_phishing">PhishingLongDescText</p>
          <p id="errorLongDescText_malware">MalwareLongDescText</p>
          <p id="errorLongDescText_whyBlocked">MoreInformationFormat</p>
        </div>
        
        <!-- Action buttons -->
        <div id="buttons">
          <!-- Commands handled in BrowserWrapper -->
          <xul:button xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
                      id="ignoreWarningButton" label="IgnoreWarningButtonLabel"/>
          <xul:button xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
                      id="getMeOutButton" label="GetMeOutButtonLabel" default="true"/>
        </div>
      </div>
    </div>
    <!--
    - Note: It is important to run the script this way, instead of using
    - an onload handler. This is because error pages are loaded as
    - LOAD_BACKGROUND, which means that onload handlers will not be executed.
    -->
    <script type="application/javascript">initPage();</script>
  </body>
</html>
