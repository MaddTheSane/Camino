#!/usr/bin/perl

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# mozcodate2iso8601 converts date strings in the format used for MOZ_CO_DATE
# into ISO 8601.  MOZ_CO_DATE is the date specification used with
# "cvs checkout -D".  It is set by tools/tinderbox/build-seamonkey-util.pl
# for automated builds when UseTimeStamp is turned on.  Note that UseTimeStamp
# is usually off for release builds, which come from a fixed CVS tag.  Most
# non-automated buids also don't have MOZ_CO_DATE set.  To handle those
# cases, this script will also accept no argument or an empty argument and
# exit without failing or producing any output.

use strict;
use warnings;
use POSIX;

sub error() {
  print STDERR ('usage: ' . $0 . " 'mm/dd/yyyy hh:mm +zzzz'\n");
  return 1;
}

if ($#ARGV > 0) {
  exit(error());
}
elsif ($#ARGV == 0 && length($ARGV[0])) {
  if ($ARGV[0] =~
      /^(\d{2})\/(\d{2})\/(\d{4}) (\d{2}):(\d{2}) ([-+])([\d]{2})([\d]{2})$/) {
    # mm/dd/yyyy hh:mm +zzzz
    # $1/$2/$3   $4:$5 $6$7$8

    # Set the timezone.  POSIX wants the offset as a number to add to a local
    # time to get UTC, so flip the sign.
    $ENV{'TZ'} = 'UTC' . ($6 eq '+' ? '-' : '+') . $7 . ':' . $8;

    # The input string has only one-minute resolution, so set the seconds
    # field to 0.
    my $time = mktime(0, $5, $4, $2, $1 - 1, $3 - 1900);
    if (!defined($time)) {
      exit(error());
    }

    # Print the date and time in ISO 8601 combined format, in the zulu (UTC)
    # zone.
    print(strftime('%Y-%m-%dT%H:%M:%SZ', gmtime($time)) . "\n");
  }
  else {
    exit(error());
  }
}

exit(0);
